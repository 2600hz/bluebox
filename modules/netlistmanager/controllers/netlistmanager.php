<?php defined('SYSPATH') or die('No direct access allowed.');
/**
 * NetListManager.php - Network List Management Controller Class.
 *
 * Network lists are lists of domain names, IP addresses and IP address ranges that can be used to identify various
 * network-related activities, such as inbound callers that can bypass authentication, local callers who are on NAT, etc.
 *
 * This module provides both models and switch support for network lists and the tools to turn these into ACLs in some cases
 *
 * @author K Anderson
 * @license LGPL
 * @package Bluebox
 * @subpackage NetList
 */
class NetListManager_Controller extends Bluebox_Controller
{
    protected $baseModel = 'NetList';
    protected $writable = array(
        'name',
        'allow'
    );
    public function __construct()
    {
        parent::__construct();
        stylesheet::add('netlist', 40);
    }
    public function index()
    {
        $this->template->content = new View('generic/grid');
        // Build a grid with a hidden net_list_id
        $this->grid = jgrid::grid($this->baseModel, array(
            'caption' => 'My Network Lists',
            'multiselect' => true
        ))->add('net_list_id', 'ID', array(
            'hidden' => true,
            'key' => true
        ))->add('name', 'Name')->addAction('netlistmanager/edit', 'Edit', array(
            'arguments' => 'net_list_id',
            'width' => '120'
        ))->addAction('netlistmanager/delete', 'Delete', array(
            'arguments' => 'net_list_id',
            'width' => '20'
        ))->navGrid(array(
            'del' => true
        ));
        // dont foget to let the plugins add to the grid!
        plugins::views($this);
        // Produces the grid markup or JSON
        $this->view->grid = $this->grid->produce();
    }
    public function edit($id = NULL)
    {
        // Overload the update view
        $this->template->content = new View(Router::$controller . '/update');
        $this->view->title = 'Edit Network List';
        $this->netlist = Doctrine::getTable('NetList')->find($id);
        // Was anything retrieved? If no, this may be an invalid request
        if (!$this->netlist) {
            // Send any errors back to the index
            $error = i18n('Unable to locate network list id %1$d!', $id)->sprintf()->s();
            message::set($error, array(
                'translate' => false,
                'redirect' => Router::$controller . '/index'
            ));
            return true;
        }
        if (!empty($this->netlist['system_list'])) {
            message::set($this->netlist['name'] . ' is generated by FreeSwitch and can not be edited!', array(
                'type' => 'alert',
                'redirect' => Router::$controller . '/index'
            ));
        }
        // Are we supposed to be saving stuff? (received a form post?)
        if ($this->submitted()) {
            // get a unique list of networks
            $netListItems = $this->input->post('ips', array());
            if (!empty($netListItems)) {
                $netListItems += array(
                    'allow' => array(),
                    'deny' => array()
                );
                // make each value a subarray with record and allow keys
                array_walk($netListItems['allow'], create_function('&$v,$k', '$v = array("record" => $v, "allow" => TRUE);'));
                array_walk($netListItems['deny'], create_function('&$v,$k', '$v = array("record" => $v, "allow" => FALSE);'));
                $netListItems = array_merge($netListItems['allow'], $netListItems['deny']);
            }
            $netListItems = array('NetListItem' => $netListItems);
            // incorporate the array into the the netlist
            $this->netlist->markModified('name');
            $this->netlist->synchronizeWithArray($netListItems);            
            // save this netlist
            if ($this->formSave($this->netlist)) {
                url::redirect(Router_Core::$controller);
            }
        }
        $this->populateDropdowns($this->netlist['net_list_id']);
        // Allow our netlist object to be seen by the view
        $this->view->netlist = $this->netlist;
        // Execute plugin hooks here, after we've loaded the core data sets
        plugins::views($this);
    }
    public function add()
    {
        $this->template->content = new View(Router::$controller . '/update');
        $this->view->title = 'Add Access Control List';
        $this->view->errors = array();
        $this->netlist = new NetList();
        // Are we supposed to be saving stuff? (received a form post?)
        if ($this->submitted()) {
            // get a unique list of networks
            $netListItems = $this->input->post('ips', array());
            if (!empty($netListItems)) {
                $netListItems += array(
                    'allow' => array(),
                    'deny' => array()
                );
                // make each value a subarray with record and allow keys
                array_walk($netListItems['allow'], create_function('&$v,$k', '$v = array("record" => $v, "allow" => TRUE);'));
                array_walk($netListItems['deny'], create_function('&$v,$k', '$v = array("record" => $v, "allow" => FALSE);'));
                $netListItems = array_merge($netListItems['allow'], $netListItems['deny']);
            }
            $netListItems = array('NetListItem' => $netListItems);
            // incorporate the array into the the netlist
            $this->netlist->synchronizeWithArray($netListItems);
            // save this netlist
            if ($this->formSave($this->netlist)) {
                url::redirect(Router_Core::$controller);
            }
        }
        $this->populateDropdowns($this->netlist['net_list_id']);
        // Allow our netlist object to be seen by the view
        $this->view->netlist = $this->netlist;
        // Execute plugin hooks here, after we've loaded the core data sets
        plugins::views($this);
    }
    public function delete($id = NULL)
    {
        $this->stdDelete($id);
    }
    private function populateDropdowns($netListID) {
        $allowList = empty($_POST['ips']['allow']) ? array() : array_flip($_POST['ips']['allow']);
        $denyList = empty($_POST['ips']['deny']) ? array() : array_flip($_POST['ips']['deny']);
        $options = array(
            '127.0.0.1/32' => '127.0.0.1 (Loopback)',
            '10.0.0.0/8' => '10.0.0.0 - 10.255.255.255 (Private Network)',
            '172.16.0.0/12' => '172.16.0.0 - 172.31.255.255 (Private Network)',
            '192.168.0.0/16' => '192.168.0.0 - 192.168.255.255 (Private Network)'
        );

        $allListItems = Doctrine::getTable('NetListItem')->findAll();
        foreach ($allListItems as $item) {
            $cidr = $item['record'];

            $range = network::cidr2range($cidr);

            if (empty($range)) {
                $description = $cidr;
            } else if ($range['start'] == $range['end']) {
                $description = $range['start'];
            } else {
                $description = $range['start'] . ' - ' . $range['end'];
            }

            if (!empty($item['description'])) {
                $description .= ' (' . $item['description'] . ')';
            }

            // all net lists go into the options list
            $options[$cidr] = $description;

            // check if it is in the selected list
            if ($netListID == $item['net_list_id']) {
                if (empty($item['allow'])) {
                    $denyList[$cidr] = $description;
                } else {
                    $allowList[$cidr] = $description;
                }
            }
        }
        $this->view->netListItems = array_unique($options);
        $this->view->netListAllow = array_keys($allowList);
        $this->view->netListDeny = array_keys($denyList);
    }
}
